{"version":3,"sources":["utils/typography.tsx","hooks/useUser.tsx","pages/Router.tsx","Layout/Layout.tsx","reportWebVitals.ts","index.tsx"],"names":["typography","Typography","baseFontSize","baseLineHeight","headerFontFamily","bodyFontFamily","scaleRatio","headerColor","headerWeight","bodyColor","boldWeight","bodyWeight","rhythm","scale","useUser","useSwr","url","axios","baseURL","process","withCredentials","method","then","res","data","suspense","shouldRetryOnError","mutate","error","loading","response","Expense","lazy","Home","Login","PrivateRoute","route","status","to","RouterMain","fallback","exact","path","component","injectStyles","theme","createMuiTheme","fontFamily","join","palette","primary","main","Layout","ThemeProvider","Router","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2FAAA,kHAEaA,EAAa,IAF1B,OAE8BC,GAAW,CACvCC,aAAc,OACdC,eAAgB,IAChBC,iBAAkB,CAAC,QAAS,cAC5BC,eAAgB,CAAC,QAAS,cAC1BC,WAAY,EACZC,YAAa,wBACbC,aAAc,IACdC,UAAW,eACXC,WAAY,IACZC,WAAY,MAGCC,EAAkBZ,EAAlBY,OAAQC,EAAUb,EAAVa,O,gCCfvB,6BA2BeC,IAvBR,WACL,IADwB,EASQC,YAAkB,gBARlC,SAACC,GAAD,OACdC,IAAM,CACJD,MACAE,QAASC,6CACTC,iBAAiB,EACjBC,OAAQ,QACPC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAEoD,CACzEC,UAAU,EACVC,oBAAoB,IAFdF,EATgB,EAShBA,KAAMG,EATU,EASVA,OAAQC,EATE,EASFA,MAMtB,MAAO,CACLC,SAHeL,IAASI,EAIxBJ,OACAG,SACAC,MAAK,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAOE,Y,uKCbZC,EAAUC,gBAAK,kBAAM,8DACrBC,EAAOD,gBAAK,kBAAM,8DAClBE,EAAQF,gBAAK,kBAAM,uDAEzB,SAASG,EAAaC,GAAoB,IAAD,EACZtB,cAAnBc,EAD+B,EAC/BA,MAER,OAHuC,EACxBC,UAEM,OAALD,QAAK,IAALA,OAAA,EAAAA,EAAOS,QAAS,IACvB,cAAC,IAAD,CAAUC,GAAG,WAEf,cAAC,IAAD,eAAWF,IAiBLG,MAdR,WACL,OACE,cAAC,IAAD,UACE,cAAC,WAAD,CAAUC,SAAU,4CAApB,SACE,eAAC,IAAD,WACE,cAACL,EAAD,CAAcM,OAAK,EAACC,KAAK,IAAIC,UAAWV,IACxC,cAACE,EAAD,CAAcM,OAAK,EAACC,KAAK,WAAWC,UAAWZ,IAC/C,cAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,SAASC,UAAWT,YCzBhDlC,IAAW4C,eAEX,IAAMC,EAAQC,YAAe,CAC3B9C,WAAY,CACV+C,WAAY,CAAC,SAASC,KAAK,KAE7BC,QAAS,CACPC,QAAS,CACPC,KAAM,cAKL,SAASC,IACd,OACE,cAACC,EAAA,EAAD,CAAeR,MAAOA,EAAtB,SACE,cAACS,EAAD,MAKSF,ICZAG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBnC,MAAK,YAAkD,IAA/CoC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACb,EAAD,MAEFc,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a69044da.chunk.js","sourcesContent":["import Typography from 'typography';\r\n\r\nexport const typography = new Typography({\r\n  baseFontSize: '16px',\r\n  baseLineHeight: 1.7,\r\n  headerFontFamily: ['Kanit', 'sans-serif'],\r\n  bodyFontFamily: ['Kanit', 'sans-serif'],\r\n  scaleRatio: 2.0,\r\n  headerColor: 'var(--lightest-slate)',\r\n  headerWeight: 500,\r\n  bodyColor: 'var(--slate)',\r\n  boldWeight: 600,\r\n  bodyWeight: 400,\r\n});\r\n\r\nexport const { rhythm, scale } = typography;\r\n","import useSwr from 'swr';\r\nimport axios from 'axios';\r\nimport { User } from 'src/@types/User';\r\n\r\nexport function useUser() {\r\n  const fetcher = (url: any) =>\r\n    axios({\r\n      url,\r\n      baseURL: process.env.REACT_APP_API_BASE_URL,\r\n      withCredentials: true,\r\n      method: 'GET',\r\n    }).then((res) => res.data);\r\n\r\n  const { data, mutate, error } = useSwr<User, any>('/api/v1/auth', fetcher, {\r\n    suspense: false,\r\n    shouldRetryOnError: false,\r\n  });\r\n  const loading = !data && !error;\r\n\r\n  return {\r\n    loading,\r\n    data,\r\n    mutate,\r\n    error: error?.response,\r\n  };\r\n}\r\n\r\nexport default useUser;\r\n","import React, { Suspense, lazy } from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n  Redirect,\r\n  RouteProps,\r\n} from 'react-router-dom';\r\nimport useUser from 'src/hooks/useUser';\r\n\r\nconst Expense = lazy(() => import('./Expense'));\r\nconst Home = lazy(() => import('./Home'));\r\nconst Login = lazy(() => import('./Login'));\r\n\r\nfunction PrivateRoute(route: RouteProps) {\r\n  const { error, loading } = useUser();\r\n\r\n  if (!loading && error?.status > 400) {\r\n    return <Redirect to=\"/login\" />;\r\n  }\r\n  return <Route {...route} />;\r\n}\r\n\r\nexport function RouterMain() {\r\n  return (\r\n    <Router>\r\n      <Suspense fallback={<div>Loading..</div>}>\r\n        <Switch>\r\n          <PrivateRoute exact path=\"/\" component={Home} />\r\n          <PrivateRoute exact path=\"/expense\" component={Expense} />\r\n          <Route exact path=\"/login\" component={Login} />\r\n        </Switch>\r\n      </Suspense>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default RouterMain;\r\n","import React from 'react';\r\nimport { typography } from 'src/utils/typography';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport Router from 'src/pages/Router';\r\n\r\ntypography.injectStyles();\r\n\r\nconst theme = createMuiTheme({\r\n  typography: {\r\n    fontFamily: ['Kanit'].join(''),\r\n  },\r\n  palette: {\r\n    primary: {\r\n      main: '#64ffda',\r\n    },\r\n  },\r\n});\r\n\r\nexport function Layout() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Router />\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default Layout;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Layout } from './Layout';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Layout />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}